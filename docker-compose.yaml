services:
  user-service:
    image: neerajbabu/user-service # image name given to build file
    build:
      context: ./services/user-service # set working folder for build
      dockerfile: Dockerfile # build source
    container_name: user-service # container name
    depends_on:
      - user-database
    ports:
      - 8000:8000
    environment:
      - JWT_SECRET=value
      - DEBUG=True
      - DB_NAME=user
      - DB_USER=postgres
      - DB_HOST=user-database # database service name
      - DB_PASS=postgres
      - DB_PORT=5432
      - OTEL_SERVICE_NAME=user-service
      - OTEL_TRACES_EXPORTER=console,otlp
      - OTEL_METRICS_EXPORTER=console
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://user-service-otel-agent:4318
    volumes:
      - ./services/user-service:/app
    command: /start.dev.sh

  user-database:
    image: postgres:17
    container_name: user-database
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=user
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    volumes:
      - user_database_data:/var/lib/postgresql/data
      - user_database_data_backup:/backups

  user-service-otel-agent:
    image: otel/opentelemetry-collector:latest
    container_name: user-service-otel-agent
    restart: unless-stopped
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml
    command: ["--config=/etc/otel/config.yaml"]
    ports:
      - "4318:4318"    # OTLP HTTP ingest
      - "9464:9464"    # Prometheus metrics endpoint

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    command: ["--config.file=/etc/prometheus/prometheus.yaml"]
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.0
    container_name: logstash
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - 5044:5044
      - 9600:9600
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf

    
volumes:
  user_database_data:
    driver: local
  user_database_data_backup:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local